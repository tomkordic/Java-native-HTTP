plugins {
    id 'net.freudasoft.gradle-cmake-plugin' version '0.0.2'
    id 'groovy'
    id 'java'
    id 'application'
    id 'org.jetbrains.intellij' version '0.6.3'
}

group 'com.tom'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'org.nanohttpd', name: 'nanohttpd', version: '2.3.1'
    compile group: 'org.nanohttpd', name: 'nanohttpd-apache-fileupload', version: '2.3.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    version '2020.2.3'
}


application {
    mainClassName = "com.tom.streamlabs.SlNanoServer"
    applicationName = 'StreamlabsHttpServer'
    executableDir = file("$rootDir/bin/")
    applicationDefaultJvmArgs = ["-Djava.library.path=./lib"]
}


task createDirs {
    doLast {
        mkdir('./bin/static')
        mkdir('./bin/lib')
    }
}

task copyStaticFiles(dependsOn: createDirs, type: Copy) {
    into './bin/static'
    from './static/'
}

task copyLibFiles(dependsOn: copyStaticFiles, type: Copy) {
    into './bin/lib'
    from './lib/'
}

task copyScriptFiles(dependsOn: copyLibFiles, type: Copy) {
    from "${buildDir}/scripts"
    into "./bin"
}

cmake {
    // optional working folder. default is ./build/cmake
    workingFolder=file("$buildDir/cmake")

    ////////////////////
    // cmakeConfigure parameters
    ////////////////////
    // optional source folder. This is where the main CMakeLists.txt file resides. Default is ./src/main/cpp
    sourceFolder=file("$projectDir/src/main/cpp")
    // optional install prefix. By default, install prefix is empty.
    installPrefix="./lib"
    // optionally set to build static libs
    buildStaticLibs=false
    // optionally set to build shared libs
    buildSharedLibs=true
    // define arbitrary CMake parameters. The below adds -Dtest=hello to cmake command line.
//    def.test='hello'

    ////////////////////
    // cmakeBuild parameters
    ////////////////////
    // optional configuration to build
    buildConfig='Release'
    // optional build target
    buildTarget='install'
    // optional build clean. if set to true, calls cmake --build with --clean-first
    buildClean=true
}

build  {
    dependsOn  cmakeBuild
    finalizedBy copyScriptFiles
}
